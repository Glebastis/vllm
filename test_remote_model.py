#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã vLLM –º–æ–¥–µ–ª–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω–µ
"""

import requests
import json
import time
import os
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
REMOTE_HOST = "REMOTE_HOST"
API_KEY = "API_KEY"
REMOTE_PORT = 3423  # –ü–æ—Ä—Ç –∏–∑ docker-compose.yml
BASE_URL = f"http://{REMOTE_HOST}:{REMOTE_PORT}"
MODEL_NAME = "MODEL_NAME"

# –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_api_key():
    api_key = os.getenv('VLLM_API_KEY')
    if not api_key:
        if API_KEY:
            api_key = API_KEY
        else:
            api_key = input("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è vLLM: ").strip()
    return api_key

def test_health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=10)
        print(f"‚úÖ Health check: {response.status_code}")
        if response.status_code == 200:
            print(f"   Response: {response.text}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
        return False

def test_completion():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = get_api_key()
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω")
        return False
    
    payload = {
        "model": MODEL_NAME,  # –ò–º—è –º–æ–¥–µ–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        "messages": [
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."}
        ],
        "max_tokens": 100,
        "temperature": 0.7,
        "stream": False
    }
    
    try:
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        start_time = time.time()
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        response = requests.post(
            f"{BASE_URL}/v1/chat/completions",
            json=payload,
            timeout=30,
            headers=headers
        )
        
        end_time = time.time()
        print(f"‚úÖ Completion: {response.status_code} (–≤—Ä–µ–º—è: {end_time - start_time:.2f}—Å)")
        
        if response.status_code == 200:
            result = response.json()
            print(f"   –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:")
            print(f"   {result['choices'][0]['message']['content']}")
            return True
        else:
            print(f"   Error: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Completion failed: {e}")
        return False

def test_streaming():
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = get_api_key()
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω")
        return False
    
    payload = {
        "model": MODEL_NAME,
        "messages": [
            {"role": "user", "content": "–†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ –∫–æ—Ç–∞. –ù–∞—á–Ω–∏ —Å '–ñ–∏–ª-–±—ã–ª –∫–æ—Ç...'"}
        ],
        "max_tokens": 150,
        "temperature": 0.8,
        "stream": True
    }
    
    try:
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ—Ç–æ–∫–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        start_time = time.time()
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        response = requests.post(
            f"{BASE_URL}/v1/chat/completions",
            json=payload,
            timeout=60,
            headers=headers,
            stream=True
        )
        
        if response.status_code == 200:
            print("‚úÖ Streaming response:")
            full_response = ""
            for line in response.iter_lines():
                if line:
                    line_str = line.decode('utf-8')
                    if line_str.startswith('data: '):
                        data_str = line_str[6:]  # –£–±–∏—Ä–∞–µ–º 'data: '
                        if data_str == '[DONE]':
                            break
                        try:
                            data = json.loads(data_str)
                            if 'choices' in data and len(data['choices']) > 0:
                                delta = data['choices'][0].get('delta', {})
                                if 'content' in delta:
                                    content = delta['content']
                                    print(content, end='', flush=True)
                                    full_response += content
                        except json.JSONDecodeError:
                            continue
            
            end_time = time.time()
            print(f"\n\n‚úÖ Streaming completed (–≤—Ä–µ–º—è: {end_time - start_time:.2f}—Å)")
            return True
        else:
            print(f"‚ùå Streaming failed: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Streaming failed: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ vLLM –º–æ–¥–µ–ª–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π –º–∞—à–∏–Ω–µ")
    print(f"üìç –ê–¥—Ä–µ—Å: {BASE_URL}")
    print("=" * 50)
    
    tests = [
        ("Health Check", test_health_check),
        ("Completion", test_completion),
        ("Streaming", test_streaming)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        print("-" * 30)
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏.")

if __name__ == "__main__":
    main() 